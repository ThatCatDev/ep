// Code generated by MockGen. DO NOT EDIT.
// Source: driver.go
//
// Generated by this command:
//
//	mockgen -source=driver.go -destination=../internal/mocks/driver.go -package mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	event "github.com/ThatCatDev/ep/v2/event"
	gomock "go.uber.org/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver[DM any] struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder[DM]
	isgomock struct{}
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder[DM any] struct {
	mock *MockDriver[DM]
}

// NewMockDriver creates a new mock instance.
func NewMockDriver[DM any](ctrl *gomock.Controller) *MockDriver[DM] {
	mock := &MockDriver[DM]{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder[DM]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver[DM]) EXPECT() *MockDriverMockRecorder[DM] {
	return m.recorder
}

// Close mocks base method.
func (m *MockDriver[DM]) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDriverMockRecorder[DM]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDriver[DM])(nil).Close))
}

// Consume mocks base method.
func (m *MockDriver[DM]) Consume(ctx context.Context, topic string, handler func(context.Context, DM, []byte) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Consume", ctx, topic, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consume indicates an expected call of Consume.
func (mr *MockDriverMockRecorder[DM]) Consume(ctx, topic, handler any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consume", reflect.TypeOf((*MockDriver[DM])(nil).Consume), ctx, topic, handler)
}

// CreateTopic mocks base method.
func (m *MockDriver[DM]) CreateTopic(ctx context.Context, topic string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, topic)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockDriverMockRecorder[DM]) CreateTopic(ctx, topic any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockDriver[DM])(nil).CreateTopic), ctx, topic)
}

// ExtractEvent mocks base method.
func (m *MockDriver[DM]) ExtractEvent(data DM) (*event.SubData[DM], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtractEvent", data)
	ret0, _ := ret[0].(*event.SubData[DM])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExtractEvent indicates an expected call of ExtractEvent.
func (mr *MockDriverMockRecorder[DM]) ExtractEvent(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtractEvent", reflect.TypeOf((*MockDriver[DM])(nil).ExtractEvent), data)
}

// Produce mocks base method.
func (m *MockDriver[DM]) Produce(ctx context.Context, topic string, message DM) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Produce", ctx, topic, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Produce indicates an expected call of Produce.
func (mr *MockDriverMockRecorder[DM]) Produce(ctx, topic, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Produce", reflect.TypeOf((*MockDriver[DM])(nil).Produce), ctx, topic, message)
}
